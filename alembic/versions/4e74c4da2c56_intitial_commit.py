"""Initial Commit

Revision ID: 4e74c4da2c56
Revises: 
Create Date: 2022-07-13 16:02:33.305094

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '4e74c4da2c56'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('classifier_elu_values',
                    sa.Column('eluid', sa.Integer(),
                              autoincrement=False, nullable=False),
                    sa.Column('class1', sa.String(), nullable=True),
                    sa.Column('class2', sa.String(), nullable=True),
                    sa.Column('class3', sa.String(), nullable=True),
                    sa.PrimaryKeyConstraint('eluid')
                    )
    op.create_table('classifier_observations',
                    sa.Column('gbifid', sa.BigInteger(), nullable=False),
                    sa.Column('specieskey', sa.Integer(), nullable=False),
                    sa.Column('decimallatitude', sa.Float(), nullable=False),
                    sa.Column('decimallongitude', sa.Float(), nullable=False),
                    sa.PrimaryKeyConstraint(
                        'specieskey', 'decimallatitude', 'decimallongitude', 'gbifid'),
                    sa.UniqueConstraint('gbifid')
                    )
    with op.batch_alter_table('classifier_observations', schema=None) as batch_op:
        batch_op.create_index('observations_specieskey_latitude_longitutde', [
                              'specieskey', 'decimallatitude', 'decimallongitude'], unique=False)

    op.create_table('classifier_species',
                    sa.Column('family', sa.String(), nullable=True),
                    sa.Column('genus', sa.String(), nullable=True),
                    sa.Column('species', sa.String(), nullable=True),
                    sa.Column('familykey', sa.Integer(), nullable=True),
                    sa.Column('genuskey', sa.Integer(), nullable=True),
                    sa.Column('specieskey', sa.Integer(), nullable=True),
                    sa.Column('total', sa.Integer(), nullable=True),
                    sa.PrimaryKeyConstraint('species', 'specieskey', 'total')
                    )
    op.create_table('classifier_speciesstats',
                    sa.Column('species', sa.Integer(), nullable=True),
                    sa.Column('stat', sa.String(), nullable=True),
                    sa.Column('value', sa.String(), nullable=True),
                    sa.Column('likelihood', sa.Float(), nullable=True),
                    sa.PrimaryKeyConstraint('species', 'stat', 'value')
                    )
    op.create_table('dbpedia',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('prop', sa.String(), nullable=True),
                    sa.Column('species', sa.String(), nullable=True),
                    sa.Column('value', sa.String(), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )
    with op.batch_alter_table('dbpedia', schema=None) as batch_op:
        batch_op.create_index('dbpedia_species_prop_value_idx', [
                              'species', 'prop', 'value'], unique=True)

    op.create_table('gbif_observers',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('name')
                    )
    op.create_table('species',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('phylum', sa.String(), nullable=True),
                    sa.Column('classname', sa.String(), nullable=True),
                    sa.Column('order', sa.String(), nullable=True),
                    sa.Column('family', sa.String(), nullable=True),
                    sa.Column('genus', sa.String(), nullable=True),
                    sa.Column('species', sa.String(), nullable=True),
                    sa.Column('description', sa.String(), nullable=True),
                    sa.Column('included_in_classifier',
                              sa.Boolean(), nullable=True),
                    sa.Column('number_of_observations',
                              sa.Integer(), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )
    with op.batch_alter_table('species', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_species_classname'), [
                              'classname'], unique=False)
        batch_op.create_index(batch_op.f('ix_species_family'), [
                              'family'], unique=False)
        batch_op.create_index(batch_op.f('ix_species_genus'), [
                              'genus'], unique=False)
        batch_op.create_index(batch_op.f('ix_species_order'), [
                              'order'], unique=False)
        batch_op.create_index(batch_op.f('ix_species_phylum'), [
                              'phylum'], unique=False)
        batch_op.create_index(batch_op.f('ix_species_species'), [
                              'species'], unique=True)
        batch_op.create_index('species_included_in_classifier_index', [
                              'included_in_classifier', 'id'], unique=True)

    op.create_table('common_names',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('name', sa.String(), nullable=True),
                    sa.Column('language', sa.String(), nullable=True),
                    sa.Column('species_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['species_id'], ['species.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    with op.batch_alter_table('common_names', schema=None) as batch_op:
        batch_op.create_index('cn_species_name_language', [
                              'species_id', 'name', 'language'], unique=True)
        batch_op.create_index(batch_op.f('ix_common_names_species_id'), [
                              'species_id'], unique=False)

    op.create_table('gbif_observations',
                    sa.Column('gbifid', sa.BigInteger(),
                              autoincrement=False, nullable=False),
                    sa.Column('datecreated', sa.DateTime(), nullable=True),
                    sa.Column('latitude', sa.Float(), nullable=True),
                    sa.Column('longitude', sa.Float(), nullable=True),
                    sa.Column('public', sa.Boolean(), nullable=True),
                    sa.Column('acces_rights', sa.String(), nullable=True),
                    sa.Column('rights_holder', sa.String(), nullable=True),
                    sa.Column('recorded_by', sa.String(), nullable=True),
                    sa.Column('license', sa.String(), nullable=True),
                    sa.Column('countrycode', sa.String(), nullable=True),
                    sa.Column('state_province', sa.String(), nullable=True),
                    sa.Column('county', sa.String(), nullable=True),
                    sa.Column('municipality', sa.String(), nullable=True),
                    sa.Column('locality', sa.String(), nullable=True),
                    sa.Column('species_id', sa.Integer(), nullable=True),
                    sa.Column('observer_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(
                        ['observer_id'], ['gbif_observers.id'], ),
                    sa.ForeignKeyConstraint(['species_id'], ['species.id'], ),
                    sa.PrimaryKeyConstraint('gbifid')
                    )
    with op.batch_alter_table('gbif_observations', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_gbif_observations_species_id'), [
                              'species_id'], unique=False)
        batch_op.create_index('obs_gbifobs_observer_idx', [
                              'observer_id'], unique=False)
        batch_op.create_index('obs_gbifobs_sp_lat_lon_pub_idx', [
                              'species_id', 'latitude', 'longitude', 'public'], unique=False)

    op.create_table('gbif_observation_images',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('imgid', sa.Integer(), nullable=True),
                    sa.Column('external_url', sa.String(), nullable=True),
                    sa.Column('rights_holder', sa.String(), nullable=True),
                    sa.Column('creator', sa.String(), nullable=True),
                    sa.Column('license', sa.String(), nullable=True),
                    sa.Column('is_thumbnail', sa.Boolean(), nullable=True),
                    sa.Column('observation_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['observation_id'], [
                        'gbif_observations.gbifid'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    with op.batch_alter_table('gbif_observation_images', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_gbif_observation_images_observation_id'), [
                              'observation_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('gbif_observation_images', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f(
            'ix_gbif_observation_images_observation_id'))

    op.drop_table('gbif_observation_images')
    with op.batch_alter_table('gbif_observations', schema=None) as batch_op:
        batch_op.drop_index('obs_gbifobs_sp_lat_lon_pub_idx')
        batch_op.drop_index('obs_gbifobs_observer_idx')
        batch_op.drop_index(batch_op.f('ix_gbif_observations_species_id'))

    op.drop_table('gbif_observations')
    with op.batch_alter_table('common_names', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_common_names_species_id'))
        batch_op.drop_index('cn_species_name_language')

    op.drop_table('common_names')
    with op.batch_alter_table('species', schema=None) as batch_op:
        batch_op.drop_index('species_included_in_classifier_index')
        batch_op.drop_index(batch_op.f('ix_species_species'))
        batch_op.drop_index(batch_op.f('ix_species_phylum'))
        batch_op.drop_index(batch_op.f('ix_species_order'))
        batch_op.drop_index(batch_op.f('ix_species_genus'))
        batch_op.drop_index(batch_op.f('ix_species_family'))
        batch_op.drop_index(batch_op.f('ix_species_classname'))

    op.drop_table('species')
    op.drop_table('gbif_observers')
    with op.batch_alter_table('dbpedia', schema=None) as batch_op:
        batch_op.drop_index('dbpedia_species_prop_value_idx')

    op.drop_table('dbpedia')
    op.drop_table('classifier_speciesstats')
    op.drop_table('classifier_species')
    with op.batch_alter_table('classifier_observations', schema=None) as batch_op:
        batch_op.drop_index('observations_specieskey_latitude_longitutde')

    op.drop_table('classifier_observations')
    op.drop_table('classifier_elu_values')
    # ### end Alembic commands ###
